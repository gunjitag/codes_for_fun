factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(x==1) 1 else if(x == 2 | x==3) 2 else if(sqrt(x) == floor(sqrt(x))) 1 + 2*length(factors) else 2 + 2*length(factors)
output
}
#Start with traingular number
i <- 2
triangular_num <- 1
while(num_factors <= 5) {
triangular_num <- triangular_num + i
num_factors <- num_fac(triangular_num)
i <- i + 1
}
num_factors
triangular_num
#Clear the environment
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
factors <- c()
for(i in 2:floor(sqrt(x))) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(x==1) 1 else if(x == 2 | x==3) 2 else if(sqrt(x) == floor(sqrt(x))) 1 + 2*length(factors) else 2 + 2*length(factors)
output
}
#Start with traingular number
i <- 2
triangular_num <- 1
num_factors <- 1
while(num_factors <= 5) {
triangular_num <- triangular_num + i
num_factors <- num_fac(triangular_num)
i <- i + 1
}
num_factors
triangular_num
#Clear the environment
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
factors <- c()
for(i in 2:floor(sqrt(x))) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(x==1) 1 else if(x == 2 | x==3) 2 else if(sqrt(x) == floor(sqrt(x))) 1 + 2*length(factors) else 2 + 2*length(factors)
output
}
#Start with traingular number
i <- 2
triangular_num <- 1
num_factors <- 1
while(num_factors <= 500) {
triangular_num <- triangular_num + i
num_factors <- num_fac(triangular_num)
i <- i + 1
}
num_factors
triangular_num
#Clear the environment
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
output <- 2
for(i in 2:floor(sqrt(x))) {
output <- if (x %% i == 0) output + 2 else output
}
output <- if(x==1) 1 else if(x == 2 | x==3) 2 else if(sqrt(x) == floor(sqrt(x))) output - 1 else output
output
}
#Start with traingular number
i <- 2
triangular_num <- 1
num_factors <- 1
while(num_factors <= 500) {
triangular_num <- triangular_num + i
num_factors <- num_fac(triangular_num)
i <- i + 1
}
num_factors
triangular_num
#Write a function to find number of factors
num_fac <- function(x){
#A number has atleast 2 factors: 1 and itself
output <- 2
#We only need to check the number of factors till sqrt of x as any number below that has a mirror number above that
for(i in 2:floor(sqrt(x))) {
#Add 2 the divisor and quotient to factor list
output <- if (x %% i == 0) output + 2 else output
}
#If x is 1
output <- if(x==1) 1 else if(sqrt(x) == floor(sqrt(x))) output - 1 else output
output
}
num_fac(2)
num_fac(3)
num_fac(3)
#Clear the environment
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
#A number has atleast 2 factors: 1 and itself
output <- 2
#We only need to check the number of factors till sqrt of x as any number below that has a mirror number above that
for(i in 2:floor(sqrt(x))) {
#Add 2 the divisor and quotient to factor list
output <- if (x %% i == 0) output + 2 else output
}
#If x is divisible by sqrt(x) then that should be counted only once; Hard code 1,2,3
output <- if(x==1) 1 else if(x == 2 | x==3) 2 else if(sqrt(x) == floor(sqrt(x))) output - 1 else output
output
}
start_time <- Sys.time()
#Start with traingular number
i <- 2
triangular_num <- 1
num_factors <- 1
while(num_factors <= 500) {
triangular_num <- triangular_num + i
num_factors <- num_fac(triangular_num)
i <- i + 1
}
num_factors
triangular_num
end_time <- Sys.time()
end_time - start_time
i
2^10000
x <- nchar(one) + nchar(two) + nchar(three) + nchar(four) + nchar(five)
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five")
x
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five") + nchar("six") + nchar("seven") + nchar("eight") + nchar("nine")
x
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five") + nchar("six") + nchar("seven") + nchar("eight") + nchar("nine")
y <- nchar("eleven") + nchar("twelve") + nchar("thirteen") + nchar("fourteen") + nchar("fifteen") + nchar("sixteen") + nchar("seventeen") + nchar("eighteen") + nchar("nineteen")
y
z <-z
p <- 9*x + y + 10(z)
p <- 9*x + y + 10*z
#Make one to nine sum
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five") + nchar("six") + nchar("seven") + nchar("eight") + nchar("nine")
y <- nchar("eleven") + nchar("twelve") + nchar("thirteen") + nchar("fourteen") + nchar("fifteen") + nchar("sixteen") + nchar("seventeen") + nchar("eighteen") + nchar("nineteen")
z <- nchar("twenty") + nchar("thirty") + nchar("fourty") + nchar("fifty") + nchar("sixty") + nchar("seventy") + nchar("eighty") + nchar("ninety")
p <- 9*x + y + 10*z
p
#one to nine
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five") + nchar("six") + nchar("seven") + nchar("eight") + nchar("nine")
#ten to nineteen
y <- nchar(ten) + nchar("eleven") + nchar("twelve") + nchar("thirteen") + nchar("fourteen") + nchar("fifteen") + nchar("sixteen") + nchar("seventeen") + nchar("eighteen") + nchar("nineteen")
#10s
z <- nchar("twenty") + nchar("thirty") + nchar("fourty") + nchar("fifty") + nchar("sixty") + nchar("seventy") + nchar("eighty") + nchar("ninety")
# one to 99
p <- 9*x + y + 10*z
#special chars
q <- nchar(hundred)
r <- nchar(and)
s <- (onethousand)
#Total
10*p + 900*q + 891*r + 100*x + s
#one to nine
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five") + nchar("six") + nchar("seven") + nchar("eight") + nchar("nine")
#ten to nineteen
y <- nchar("ten") + nchar("eleven") + nchar("twelve") + nchar("thirteen") + nchar("fourteen") + nchar("fifteen") + nchar("sixteen") + nchar("seventeen") + nchar("eighteen") + nchar("nineteen")
#10s
z <- nchar("twenty") + nchar("thirty") + nchar("fourty") + nchar("fifty") + nchar("sixty") + nchar("seventy") + nchar("eighty") + nchar("ninety")
# one to 99
p <- 9*x + y + 10*z
#special chars
q <- nchar("hundred")
r <- nchar("and")
s <- nchar("onethousand")
#Total
10*p + 900*q + 891*r + 100*x + s
10*p + 900*q + 9*99*r + 100*x + s
#one to nine
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five") + nchar("six") + nchar("seven") + nchar("eight") + nchar("nine")
#ten to nineteen
y <- nchar("ten") + nchar("eleven") + nchar("twelve") + nchar("thirteen") + nchar("fourteen") + nchar("fifteen") + nchar("sixteen") + nchar("seventeen") + nchar("eighteen") + nchar("nineteen")
#10s
z <- nchar("twenty") + nchar("thirty") + nchar("forty") + nchar("fifty") + nchar("sixty") + nchar("seventy") + nchar("eighty") + nchar("ninety")
# one to 99
p <- 9*x + y + 10*z
#special chars
q <- nchar("hundred")
r <- nchar("and")
s <- nchar("onethousand")
#Total
10*p + 900*q + 9*99*r + 100*x + s
rm(list= ls())
#1 Jan 1901 is on Tuesday
dow <- c(2)
dow_lastmonth <- 2
month <- 1
year <- 1901
while(year < 2001) {
if(month %in% c(1,3,5,7,8,10,12)) {
dow_lastmonth <- dow_lastmonth + (31 %% 7)
dow_lastmonth <- if(dow_lastmonth < 8) dow_lastmonth else dow_lastmonth - 7
dow <- c(dow, dow_lastmonth)
}
else if(month %in% c(4,6,9,11)) {
dow_lastmonth <- dow_lastmonth + (30 %% 7)
dow_lastmonth <- if(dow_lastmonth < 8) dow_lastmonth else dow_lastmonth - 7
dow <- c(dow, dow_lastmonth)
}
else if(month == 2 & (year %% 4 == 0)){
dow_lastmonth <- dow_lastmonth + (29 %% 7)
dow_lastmonth <- if(dow_lastmonth < 8) dow_lastmonth else dow_lastmonth - 7
dow <- c(dow, dow_lastmonth)
}
else {
dow <- c(dow, dow_lastmonth)
}
month <- if(month + 1 < 13) month + 1 else 1
year <- if(month + 1 = 13) year + 1 else year
}
#Clear the environment
rm(list= ls())
#1 Jan 1901 is on Tuesday
dow <- c(2)
dow_lastmonth <- 2
month <- 1
year <- 1901
while(year < 2001) {
if(month %in% c(1,3,5,7,8,10,12)) {
dow_lastmonth <- dow_lastmonth + (31 %% 7)
dow_lastmonth <- if(dow_lastmonth < 8) dow_lastmonth else dow_lastmonth - 7
dow <- c(dow, dow_lastmonth)
}
else if(month %in% c(4,6,9,11)) {
dow_lastmonth <- dow_lastmonth + (30 %% 7)
dow_lastmonth <- if(dow_lastmonth < 8) dow_lastmonth else dow_lastmonth - 7
dow <- c(dow, dow_lastmonth)
}
else if(month == 2 & (year %% 4 == 0)){
dow_lastmonth <- dow_lastmonth + (29 %% 7)
dow_lastmonth <- if(dow_lastmonth < 8) dow_lastmonth else dow_lastmonth - 7
dow <- c(dow, dow_lastmonth)
}
else {
dow <- c(dow, dow_lastmonth)
}
month <- if(month + 1 < 13) month + 1 else 1
year <- if(month + 1 == 13) year + 1 else year
}
dow
length
length(dow[dow == 1])
#Clear the environment
rm(list= ls())
#1 Jan 1901 is on Tuesday
dow <- c(2)
dow_lastmonth <- 2
month <- 1
year <- 1901
while(year < 2001) {
if(month %in% c(1,3,5,7,8,10,12)) {
dow_lastmonth <- dow_lastmonth + (31 %% 7)
dow_lastmonth <- if(dow_lastmonth < 8) dow_lastmonth else dow_lastmonth - 7
dow <- c(dow, dow_lastmonth)
}
else if(month %in% c(4,6,9,11)) {
dow_lastmonth <- dow_lastmonth + (30 %% 7)
dow_lastmonth <- if(dow_lastmonth < 8) dow_lastmonth else dow_lastmonth - 7
dow <- c(dow, dow_lastmonth)
}
else if(month == 2 & (year %% 4 == 0)){
dow_lastmonth <- dow_lastmonth + (29 %% 7)
dow_lastmonth <- if(dow_lastmonth < 8) dow_lastmonth else dow_lastmonth - 7
dow <- c(dow, dow_lastmonth)
}
else {
dow <- c(dow, dow_lastmonth)
}
month <- if(month + 1 < 13) month + 1 else 1
year <- if(month + 1 == 13) year + 1 else year
}
length(dow[dow == 7])
dow_1jan1900 <- 1
dow_1jan1901 <- dow_1jan1900 + (365%%7)
dow_1jan1901
########################################################
########################################################
#Project Euler#
########################################################
########################################################
####################################################################################################
#Problem 12: Highly Divisible Triangular Number
# The sequence of triangle numbers is generated by adding the natural numbers.
#So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
####################################################################################################
#Clear the environment
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
#A number has atleast 2 factors: 1 and itself
output <- 2
#We only need to check the number of factors till sqrt of x as any number below that has a mirror number above that
for(i in 2:floor(sqrt(x))) {
#Add 2 the divisor and quotient to factor list
output <- if (x %% i == 0) output + 2 else output
}
#If x is divisible by sqrt(x) then that should be counted only once; Hard code 1,2,3
output <- if(x==1) 1 else if(x == 2 | x==3) 2 else if(sqrt(x) == floor(sqrt(x))) output - 1 else output
output
}
start_time <- Sys.time()
#Start with traingular number
i <- 2
triangular_num <- 1
num_factors <- 1
while(num_factors <= 500) {
triangular_num <- triangular_num + i
num_factors <- num_fac(triangular_num)
i <- i + 1
}
num_factors
triangular_num
end_time <- Sys.time()
end_time - start_time
#Takes a bit of time but does the job
#Problem 17: Number Letter Count
# If the numbers 1 to 5 are written out in words: one, two, three, four, five,
# then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
# If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
# NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.
####################################################################################################
#Clear the environment
rm(list= ls())
#one to nine
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five") + nchar("six") + nchar("seven") + nchar("eight") + nchar("nine")
#ten to nineteen
y <- nchar("ten") + nchar("eleven") + nchar("twelve") + nchar("thirteen") + nchar("fourteen") + nchar("fifteen") + nchar("sixteen") + nchar("seventeen") + nchar("eighteen") + nchar("nineteen")
#10s
z <- nchar("twenty") + nchar("thirty") + nchar("forty") + nchar("fifty") + nchar("sixty") + nchar("seventy") + nchar("eighty") + nchar("ninety")
# one to 99
p <- 9*x + y + 10*z
#special chars
q <- nchar("hundred")
r <- nchar("and")
s <- nchar("onethousand")
#Total (formula worked out on paper)
10*p + 900*q + 9*99*r + 100*x + s
####################################################################################################
# Problem 19: Counting Sundays
# You are given the following information, but you may prefer to do some research for yourself.
# 1 Jan 1900 was a Monday.
# Thirty days has September,
# April, June and November.
# All the rest have thirty-one,
# Saving February alone,
# Which has twenty-eight, rain or shine.
# And on leap years, twenty-nine.
# A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
# How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
####################################################################################################
#Clear the environment
rm(list= ls())
#Find out the day for 1 Jan 1901
dow_1jan1900 <- 1
#365 as 1900 is not divisible by 400
dow_1jan1901 <- dow_1jan1900 + (365%%7)
#Create a vector that stores the day on which the 1st of each month falls
dow <- c(dow_1jan1901)
#Object storing what was the day of the 1st of the month
dow_month <- 2
#Month - start with Jan
month <- 1
#Year - start with 1901
year <- 1901
#Go on till year is 2000 iclusive
while(year < 2001) {
#Months having 31 days
if(month %in% c(1,3,5,7,8,10,12)) {
dow_month <- dow_month + (31 %% 7)
#Start again if the calculation goes above 7
dow_month <- if(dow_month < 8) dow_month else dow_month - 7
#Append to the vector
dow <- c(dow, dow_month)
}
#Months having 30 days
else if(month %in% c(4,6,9,11)) {
dow_month <- dow_month + (30 %% 7)
dow_month <- if(dow_month < 8) dow_month else dow_month - 7
dow <- c(dow, dow_month)
}
#February in leap years has 29 days
else if(month == 2 & (year %% 4 == 0)){
dow_month <- dow_month + (29 %% 7)
dow_month <- if(dow_month < 8) dow_month else dow_month - 7
dow <- c(dow, dow_month)
}
#February in non-leap years has 28 days
else {
dow <- c(dow, dow_month)
}
#Increase month counter till 12 and then start again
month <- if(month + 1 < 13) month + 1 else 1
#Increase year counter every 12 months
year <- if(month + 1 == 13) year + 1 else year
}
#Number of months beginning on Sunday (7th day of week)
length(dow[dow == 5])
factorial(100)
as.character(factorial(100))
factorial(99)
factorial(99)/(10^9)
factorial(50)
factorial(10)
factorial(20)
factorial(15)
lib(gmp)
library(gmp)
as.bigz(factorial(100))
as.bigz(factorial(99))
as.bigz(factorial(99))*100
num <- as.bigz(100)
num
factorial(num)
#Clear the environment
rm(list= ls())
#Load a package that makes things easier
library(gmp)
#Get factorial of 99
num <- as.bigz(99)
factorial(num)
#Clear the environment
rm(list= ls())
#Load a package that makes things easier
library(gmp)
#Get factorial of 99
num <- as.bigz(99)
x <- factorial(num)
sum <- 0
while(x >= 1) {
sum <- sum + (x %% 10)
x <- x/10
}
sum
x
x%%10
x/10
x/10
x/10
x/10
x/10
x/10
x/10
x.10
x/10
num_char <- as.char(num)
as.c
#Clear the environment
rm(list= ls())
#Load a package that makes things easier
library(gmp)
#Get factorial of 99
num <- as.bigz(99)
num_char <- toString(num)
num_char
#Clear the environment
rm(list= ls())
#Load a package that makes things easier
library(gmp)
#Get factorial of 99
num <- as.bigz(99)
factorial_num <- factorial(num)
num_char <- toString(num)
#Clear the environment
rm(list= ls())
#Load a package that makes things easier
library(gmp)
#Get factorial of 99
num <- as.bigz(99)
factorial_num <- factorial(num)
num_fac_char <- toString(factorial_num)
num_fac_char
#Clear the environment
rm(list= ls())
#Load a package that makes things easier
library(gmp)
#Get factorial of 99
num <- as.bigz(99)
factorial_num <- factorial(num)
num_fac_char <- toString(factorial_num)
unlist(strsplit(num_fac_char, ""))
as.numeric(vec_num_components)
vec_num_components <- unlist(strsplit(num_fac_char, ""))
as.numeric(vec_num_components)
vec_num_components <- as.numeric(unlist(strsplit(num_fac_char, "")))
vec_num_components
sum(vec_num_components)
rm(list= ls())
#Find out the day for 1 Jan 1901
dow_1jan1900 <- 1
#365 as 1900 is not divisible by 400
dow_1jan1901 <- dow_1jan1900 + (365%%7)
#Create a vector that stores the day on which the 1st of each month falls
dow <- c(dow_1jan1901)
dow
31%%7
