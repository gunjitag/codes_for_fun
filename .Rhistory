<<<<<<< HEAD
i <- 10000
triangular_num <- sum(seq(1,i))
factors_tn <- factors(triangular_num)
factors <- function(x) {
factors_x <- c()
for(i in 1:x) {
factor <- if(x %% i == 0) i
factors_x <- c(factors_x, factor)
}
factors_x
}
factors_tn <- factors(triangular_num)
triangular_num = 2*triangular_num+1
factors_tn <- factors(triangular_num)
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_of_factors <- function(x) {
factors_x <- c()
for(i in 2:x/2) {
factor <- if(x %% i == 0) i
factors_x <- c(factors_x, factor)
}
length(factors_x) + 2
}
i <- 10000
triangular_num <- sum(seq(1,i))
num_factors <- function(x) {
factors_x <- c()
for(i in 2:x/2) {
factor <- if(x %% i == 0) i
factors_x <- c(factors_x, factor)
}
length(factors_x) + 2
}
#Start with the 500th triangle number
i <- 10000
triangular_num <- sum(seq(1,i))
factors_tn <- num_factors(triangular_num)
i <- 10000
triangular_num <- sum(seq(1,i))
factors_tn <- num_factors(triangular_num)
num_factors <- function(x) {
divisor <- seq(2,x/2)
remainder <- x %% divisor
length(remainder[remainder==2]) + 2
}
num_factors(28)
x<- 28
divisor <- seq(2,x/2)
remainder <- x %% divisor
remainder
num_factors <- function(x) {
divisor <- seq(2,x/2)
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
num_factors(28)
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,x/2)
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 500th triangle number
i <- 10000
triangular_num <- sum(seq(1,i))
factors_tn <- num_factors(triangular_num)
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,x/2)
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 1000000th triangle number
i <- 100000
triangular_num <- sum(seq(1,i))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 500) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 1000000th triangle number
i <- 100000
triangular_num <- sum(seq(1,i))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 500) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
num_factors(3)
num_factors(21)
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 50000th triangle number
i <- 50000
triangular_num <- sum(seq(1,i))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 500) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
rm(list = ls())
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
i <- 1000
triangular_num <- sum(seq(1,i))
i <- 10000
triangular_num <- sum(seq(1,i))
i <- 100000
triangular_num <- sum(seq(1,i))
i <- 100000
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 500) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
factors_tn <- num_factors(triangular_num)
i <- 50000
i <- 50000
triangular_num <- sum(as.numeric(seq(1,i)))
i <- 5000
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
i <- 50000
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
i <- 60000
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 1000th triangle number
i <- 28
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 5) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 1000th triangle number
i <- 1
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 5) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
num_factors(28)
num_factors(63)
i <- 1
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
i <- 2
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
#Start with the 1000th triangle number
i <- 3
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 5) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 1000th triangle number
i <- 3
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 5) {
print(triangular_num)
break
}
else {
i = i + 1
triangular_num = triangular_num + i
}
}
num_factors(1)
num_factors(2)
num_factors(3)
num_factors(4)
#Write a function to find the factors of a number
num_factors <- function(x) {
if(x > 3) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
ifelse(x == 2 | x== 3) print(2)
ifelse(x==1) print(1)
ifelse(x<-1) print "Please enter a positive number"
}
#Write a function to find the factors of a number
num_factors <- function(x) {
if(x > 3) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
ifelse(x == 2 | x== 3) print(2)
ifelse(x==1) print(1)
}
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
if(x > 3) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
ifelse(x == 2 | x== 3) {
print(2)
}
ifelse(x==1) {
print(1)
}
}
2^1000
as.numeric(2^1000)
as.character(2^1000)
2^15
2^16
3*2 + 2*2 + 7*2 + 6*2 + 8*2
6+5+5+3+6
6+4+1+4+1+2+1+6
2^50
2^25
6+6+1+1+8+8+6+4
=======
num = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
num
strsplit(num, "0")
subseq_num <- strsplit(num, "0")
subseq_num
ncha
nchar(subseq_num)
subseq_num <- strsplit(num, "0")
subseq_num
?nchar
unlist(strsplit(num, "0"))
subseq_num <- unlist(strsplit(num, "0"))
subseq_num
nchar(subseq_num[94])
nchar(subseq_num)
subseq_num
subseq_num <- subseq_num[nchar(subseq_num) >= 13]
subseq_num
num <- 7316717653133
num
num%%10
num = num /10
num
num%%10
num =floor(num)
num%%10
num =floor(num/10)
num%%10
num <- 7316717653133
#Clear the environment
rm(list = ls())
#Input the number as a string as R cannot handle this big a number
num = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
subseq_num <- unlist(strsplit(num, "0"))
subseq_num <- subseq_num[nchar(subseq_num) >= 13]
subseq_num
x <- "7316717653133"
i = 1
x_n <- nchar(x)
x_n
while(i + 12 <= x_n) {
req_num <- substr(x, i, i+12)
}
req_num
rm(list = ls())
num = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
subseq_num <- unlist(strsplit(num, "0"))
subseq_num <- subseq_num[nchar(subseq_num) >= 13]
subseq_num
x <- "7316717653133"
i = 1
x_n <- nchar(x)
x
i
x_n
req_num <- substr(x, i, i+12)
req_num
as.in
req_num <- as.integer(substr(x, i, i+12))
req_num
as.n
req_num <- as.numeric(substr(x, i, i+12))
req_num
i = 1
x_n <- nchar(x)
x_n
product_seq <- c()
while(i + 12 <= x_n) {
#Get the 13 digit number
req_num <- as.numeric(substr(x, i, i+12)
#Make parameters for the next while loop
product_x <- 1
while(x>=1) {
last_dig <- x %% 10
product_x <- product_x*last_dig
x = floor(x/10)
}
product_seq <- c(product_seq, product_x)
i= i+ 1
}
while(i + 12 <= x_n) {
req_num <- as.numeric(substr(x, i, i+12))
#Make parameters for the next while loop
product_x <- 1
while(x>=1) {
last_dig <- x %% 10
product_x <- product_x*last_dig
x = floor(x/10)
}
product_seq <- c(product_seq, product_x)
i= i+ 1
}
product_seq
produc
while(i + 12 <= x_n) {
req_num <- as.numeric(substr(x, i, i+12))
#Make parameters for the next while loop
product_req_num <- 1
while(req_num>=1) {
last_dig <- req_num  %% 10
product_req_num <- product_req_num*last_dig
req_num = floor(req_num/10)
}
product_seq <- c(product_seq, product_req_num)
i= i+ 1
}
x_n
x
product_seq
product_req_num
req_num <- as.numeric(substr(x, i, i+12))
req_num
last_dig <- req_num  %% 10
last_dig
product_req_num <- product_req_num*last_dig
product_req_num <- 1
product_req_num <- product_req_num*last_dig
last_dig
req_num = floor(req_num/10)
req_num
x
req_num
x
req_num <- as.numeric(substr(x, i, i+12))
req_num
i
i = 1
req_num <- as.numeric(substr(x, i, i+12))
req_num
product_req_num <- 1
last_dig <- req_num %% 10
product_req_num <- product_req_num*last_dig
req_num = floor(req_num/10)
req_num
product_req_num
last_dig
last_dig <- req_num %% 10
product_req_num <- product_req_num*last_dig
req_num = floor(req_num/10)
x
i = 1
x_n <- nchar(x)
product_seq <- c()
while(i + 12 <= x_n) {
req_num <- as.numeric(substr(x, i, i+12))
#Make parameters for the next while loop
product_req_num <- 1
while(req_num>=1) {
last_dig <- req_num %% 10
product_req_num <- product_req_num*last_dig
req_num = floor(req_num/10)
}
product_req_num
product_seq <- c(product_seq, product_req_num)
product_seq
i= i+ 1
}
subseq_num
x <- "6585412275886668811642717147992444292823"
#Parameters of the while loop
#Start from the 1st digit
i = 1
#Go until the last character
x_n <- nchar(x)
#Store the product of each 13 digit sequence in the following vector
product_seq <- c()
while(i + 12 <= x_n) {
req_num <- as.numeric(substr(x, i, i+12))
#Make parameters for the next while loop
product_req_num <- 1
while(req_num>=1) {
last_dig <- req_num %% 10
product_req_num <- product_req_num*last_dig
req_num = floor(req_num/10)
}
product_req_num
product_seq <- c(product_seq, product_req_num)
product_seq
i= i+ 1
}
product_seq
9^13
#Clear the environment
rm(list = ls())
#Input the number as a string as R cannot handle this big a number
num = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
subseq_num <- unlist(strsplit(num, "0"))
subseq_num <- subseq_num[nchar(subseq_num) >= 13]
product_13 <- function(x) {
#Parameters of the while loop
#Start from the 1st digit
i = 1
#Go until the last character
x_n <- nchar(x)
#Store the product of each 13 digit sequence in the following vector
product_seq <- c()
while(i + 12 <= x_n) {
req_num <- as.numeric(substr(x, i, i+12))
#Make parameters for the next while loop
product_req_num <- 1
while(req_num>=1) {
last_dig <- req_num %% 10
product_req_num <- product_req_num*last_dig
req_num = floor(req_num/10)
}
product_req_num
product_seq <- c(product_seq, product_req_num)
product_seq
i= i+ 1
}
product_seq
}
max_product13 <- function(x){
max(product_13(x))
}
sapply(subseq_num, max_product13))
sapply(subseq_num, max_product13)
max(sapply(subseq_num, max_product13))
req_seq <- seq(3, 2000000, by = 2)
req_seq
sapply(req_seq, is_prime)
#Clear the environment
rm(list = ls())
#Make a function to print all the prime numbers of a number
primefac <- function(x) {
#Step 1: Keep dividing by 2 until the number is divisible by 2
prime_factors <- c()
while(x %% 2 == 0) {
prime_factors <- c(prime_factors, 2)
x = x/2
}
#Start dividing by numbers from 3 to square root of n, and increment by 2
i <- 3
while(i <= sqrt(x)) {
while (x %%i == 0) {
prime_factors <- c(prime_factors,i)
x = x/i
}
i = i+2
}
#Now if the remainder is more than 2, the number is prime
prime_factors   <- if (x > 2) c(prime_factors, x) else prime_factors
prime_factors
}
#Make a function to identify prime nums
is_prime <- function(x) {
is_prime_print <- if(primefac(x) == x) x else 0
is_prime_print
}
#Make a sequence for 3 to 2 million odd numbers
req_seq <- seq(3, 2000000, by = 2)
sapply(req_seq, is_prime)
sapply(req_seq, is_prime)
sum <- sapply(req_seq, is_prime)
rm(list = ls())
#Make a function to identify prime nums
is_prime <- function(x) {
#Step 1: If divisible by 2 break
is_prime <- function(x) {
#If divisible by 2, not a prime number
if(x %% 2 == 0) {
nt_prime <- 1
}
#Only continue if not divisible by 2
else {
i = 3
#As long as the number is divisible by some number between 3 and sqrt of num, it is composite
while(i <= sqrt(x)) {
if (x %%i == 0) {
nt_prime <- 1
break
}
else {
i = i+2
}
}
}
is_pime_cond <- if(nt_prime == 0) x else 0
}
#Make a function to identify prime nums
is_prime <- function(x) {
#Step 1: If divisible by 2 break
is_prime <- function(x) {
#If divisible by 2, not a prime number
if(x %% 2 == 0) {
nt_prime <- 1
}
#Only continue if not divisible by 2
else {
i = 3
#As long as the number is divisible by some number between 3 and sqrt of num, it is composite
while(i <= sqrt(x)) {
if (x %%i == 0) {
nt_prime <- 1
break
}
else {
i = i+2
}
}
}
is_prime_cond <- if(nt_prime == 0) x else 0
is_prime_cond
}
is_prime
rm(list = ls())
#Make a function to identify prime nums
is_prime <- function(x) {}
#If divisible by 2, not a prime number
if(x %% 2 == 0) {
nt_prime <- 1
} else {
i = 3
#As long as the number is divisible by some number between 3 and sqrt of num, it is composite
while(i <= sqrt(x)) {
if (x %%i == 0) {
nt_prime <- 1
break
} else {
i = i+2
}
}
is_prime_cond <- if(nt_prime == 0) x else 0
is_prime_cond
}
rm(list = ls())
#Make a function to identify prime nums
is_prime <- function(x) {}
#If divisible by 2, not a prime number
if(x %% 2 == 0) {
nt_prime <- 1
} else {
i = 3
#As long as the number is divisible by some number between 3 and sqrt of num, it is composite
while(i <= sqrt(x)) {
if (x %%i == 0) {
nt_prime <- 1
break
} else {
i = i+2
}
}
is_prime_cond <- if(nt_prime == 0) x else 0
is_prime_cond
}
rm(list = ls())
#Make a function to identify prime nums
is_prime <- function(x) {}
#If divisible by 2, not a prime number
if(x %% 2 == 0) {
nt_prime <- 1
} else {
i = 3
#As long as the number is divisible by some number between 3 and sqrt of num, it is composite
while(i <= sqrt(x)) {
if (x %%i == 0) {
nt_prime <- 1
break
} else {
i = i+2
}
}
is_prime_cond <- if(nt_prime == 0) x else 0
is_prime_cond
}
rm(list = ls())
#Make a function to identify prime nums
is_prime <- function(x) {
#If divisible by 2, not a prime number
if(x %% 2 == 0) {
nt_prime <- 1
} else {
i = 3
#As long as the number is divisible by some number between 3 and sqrt of num, it is composite
while(i <= sqrt(x)) {
if (x %%i == 0) {
nt_prime <- 1
break
} else {
i = i+2
}
}
is_prime_cond <- if(nt_prime == 0) x else 0
is_prime_cond
}
}
is_prime(13)
rm(list = ls())
#Make a function to identify prime nums
is_prime <- function(x) {
nt_prime = 0
#If divisible by 2, not a prime number
if(x %% 2 == 0) {
nt_prime <- 1
} else {
i = 3
#As long as the number is divisible by some number between 3 and sqrt of num, it is composite
while(i <= sqrt(x)) {
if (x %%i == 0) {
nt_prime <- 1
break
} else {
i = i+2
}
}
is_prime_cond <- if(nt_prime == 0) x else 0
is_prime_cond
}
}
is_prime(13)
is_prime(14)
is_prime(14)
#Make a function to identify prime nums
is_prime <- function(x) {
nt_prime = 0
#If divisible by 2, not a prime number
if(x %% 2 == 0) {
nt_prime <- 1
} else {
i = 3
#As long as the number is divisible by some number between 3 and sqrt of num, it is composite
while(i <= sqrt(x)) {
if (x %%i == 0) {
nt_prime <- 1
break
} else {
i = i+2
}
}
is_prime_cond <- if(nt_prime == 0) x else 0
print(is_prime_cond)
}
}
is_prime
is_prime(14)
rm(list = ls())
is_prime <- function(x) {
smallest_primefac <- if(x %% 2 == 0) 2 else 0
i <- 3
while(smallest_primefac == 0 & i <= sqrt(x)) {
smallest_primefac <- if(x %% i == 0) i else 0
i = i+2
}
output <- if(smallest_primefac == 0) x else 0
output
}
is_prime(2)
is_prime()
rm(list = ls())
#Write a function to check whether a number is prime
is_prime <- function(x) {
smallest_primefac <- if(x %% 2 == 0) 2 else 0
i <- 3
while(smallest_primefac == 0 & i <= sqrt(x)) {
smallest_primefac <- if(x %% i == 0) i else 0
i = i+2
}
output <- if(smallest_primefac == 0) x else if(x == 2) x else 0
output
}
is_prime
is_prime(2)
is_prime(21)
is_prime(13)
is_prime(197876)
is_prime(1978768490259796788)
is_prime(119828283940)
#Clear the environment
rm(list = ls())
#Write a function to check whether a number is prime
is_prime <- function(x) {
smallest_primefac <- if(x %% 2 == 0) 2 else 0
i <- 3
while(smallest_primefac == 0 & i <= sqrt(x)) {
smallest_primefac <- if(x %% i == 0) i else 0
i = i+2
}
output <- if(smallest_primefac == 0) 1 else if(x == 2) 1 else 0
output
}
#Store prime numbers in a vector
prime_num <- c(2)
# Put in the starting point
i <- 3
while(length(prime_num) < 10001) {
prime_num <- if(is_prime(i)== 1) c(prime_num, i) else prime_num
i = i+2
}
length(prime_num)
max(prime_num)
req_seq <- seq(3,2000000, 2)
req_seq
prime_seq <- sapply(req_seq, is_prime)
prime_seq
rm(list = ls())
#Write a function to check whether a number is prime
is_prime <- function(x) {
smallest_primefac <- if(x %% 2 == 0) 2 else 0
i <- 3
while(smallest_primefac == 0 & i <= sqrt(x)) {
smallest_primefac <- if(x %% i == 0) i else 0
i = i+2
}
output <- if(smallest_primefac == 0) x else if(x == 2) x else 0
output
}
#Check the odd numbers from 3 to 2 million
req_seq <- seq(3,2000000, 2)
prime_seq <- sapply(req_seq, is_prime)
prime_seq
sum(prime_seq)
sum(sapply(req_seq, is_prime)) + 2
>>>>>>> 299fc82331733ab704268e4cc7251f78a2a35062
