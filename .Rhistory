i <- 10000
triangular_num <- sum(seq(1,i))
factors_tn <- factors(triangular_num)
factors <- function(x) {
factors_x <- c()
for(i in 1:x) {
factor <- if(x %% i == 0) i
factors_x <- c(factors_x, factor)
}
factors_x
}
factors_tn <- factors(triangular_num)
triangular_num = 2*triangular_num+1
factors_tn <- factors(triangular_num)
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_of_factors <- function(x) {
factors_x <- c()
for(i in 2:x/2) {
factor <- if(x %% i == 0) i
factors_x <- c(factors_x, factor)
}
length(factors_x) + 2
}
i <- 10000
triangular_num <- sum(seq(1,i))
num_factors <- function(x) {
factors_x <- c()
for(i in 2:x/2) {
factor <- if(x %% i == 0) i
factors_x <- c(factors_x, factor)
}
length(factors_x) + 2
}
#Start with the 500th triangle number
i <- 10000
triangular_num <- sum(seq(1,i))
factors_tn <- num_factors(triangular_num)
i <- 10000
triangular_num <- sum(seq(1,i))
factors_tn <- num_factors(triangular_num)
num_factors <- function(x) {
divisor <- seq(2,x/2)
remainder <- x %% divisor
length(remainder[remainder==2]) + 2
}
num_factors(28)
x<- 28
divisor <- seq(2,x/2)
remainder <- x %% divisor
remainder
num_factors <- function(x) {
divisor <- seq(2,x/2)
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
num_factors(28)
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,x/2)
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 500th triangle number
i <- 10000
triangular_num <- sum(seq(1,i))
factors_tn <- num_factors(triangular_num)
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,x/2)
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 1000000th triangle number
i <- 100000
triangular_num <- sum(seq(1,i))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 500) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 1000000th triangle number
i <- 100000
triangular_num <- sum(seq(1,i))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 500) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
num_factors(3)
num_factors(21)
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 50000th triangle number
i <- 50000
triangular_num <- sum(seq(1,i))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 500) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
rm(list = ls())
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
i <- 1000
triangular_num <- sum(seq(1,i))
i <- 10000
triangular_num <- sum(seq(1,i))
i <- 100000
triangular_num <- sum(seq(1,i))
i <- 100000
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 500) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
factors_tn <- num_factors(triangular_num)
i <- 50000
i <- 50000
triangular_num <- sum(as.numeric(seq(1,i)))
i <- 5000
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
i <- 50000
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
i <- 60000
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 1000th triangle number
i <- 28
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 5) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 1000th triangle number
i <- 1
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 5) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
num_factors(28)
num_factors(63)
i <- 1
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
i <- 2
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
#Start with the 1000th triangle number
i <- 3
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 5) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 1000th triangle number
i <- 3
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 5) {
print(triangular_num)
break
}
else {
i = i + 1
triangular_num = triangular_num + i
}
}
num_factors(1)
num_factors(2)
num_factors(3)
num_factors(4)
#Write a function to find the factors of a number
num_factors <- function(x) {
if(x > 3) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
ifelse(x == 2 | x== 3) print(2)
ifelse(x==1) print(1)
ifelse(x<-1) print "Please enter a positive number"
}
#Write a function to find the factors of a number
num_factors <- function(x) {
if(x > 3) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
ifelse(x == 2 | x== 3) print(2)
ifelse(x==1) print(1)
}
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
if(x > 3) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
ifelse(x == 2 | x== 3) {
print(2)
}
ifelse(x==1) {
print(1)
}
}
2^1000
as.numeric(2^1000)
as.character(2^1000)
2^15
2^16
3*2 + 2*2 + 7*2 + 6*2 + 8*2
6+5+5+3+6
6+4+1+4+1+2+1+6
2^50
2^25
6+6+1+1+8+8+6+4
