triangular_num <- sum(seq(1,i))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 500) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
rm(list = ls())
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
i <- 1000
triangular_num <- sum(seq(1,i))
i <- 10000
triangular_num <- sum(seq(1,i))
i <- 100000
triangular_num <- sum(seq(1,i))
i <- 100000
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 500) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
factors_tn <- num_factors(triangular_num)
i <- 50000
i <- 50000
triangular_num <- sum(as.numeric(seq(1,i)))
i <- 5000
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
i <- 50000
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
i <- 60000
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 1000th triangle number
i <- 28
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 5) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 1000th triangle number
i <- 1
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 5) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
num_factors(28)
num_factors(63)
i <- 1
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
i <- 2
triangular_num <- sum(as.numeric(seq(1,i)))
factors_tn <- num_factors(triangular_num)
#Start with the 1000th triangle number
i <- 3
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 5) {
print(triangular_num)
break
}
else {
triangular_num = 2*triangular_num+1
}
}
#Clear the environment
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
#Start with the 1000th triangle number
i <- 3
triangular_num <- sum(as.numeric(seq(1,i)))
repeat {
factors_tn <- num_factors(triangular_num)
if(factors_tn >= 5) {
print(triangular_num)
break
}
else {
i = i + 1
triangular_num = triangular_num + i
}
}
num_factors(1)
num_factors(2)
num_factors(3)
num_factors(4)
#Write a function to find the factors of a number
num_factors <- function(x) {
if(x > 3) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
ifelse(x == 2 | x== 3) print(2)
ifelse(x==1) print(1)
ifelse(x<-1) print "Please enter a positive number"
}
#Write a function to find the factors of a number
num_factors <- function(x) {
if(x > 3) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
ifelse(x == 2 | x== 3) print(2)
ifelse(x==1) print(1)
}
rm(list = ls())
#Write a function to find the factors of a number
num_factors <- function(x) {
if(x > 3) {
divisor <- seq(2,floor(x/2))
remainder <- x %% divisor
length(remainder[remainder==0]) + 2
}
ifelse(x == 2 | x== 3) {
print(2)
}
ifelse(x==1) {
print(1)
}
}
2^1000
as.numeric(2^1000)
as.character(2^1000)
2^15
2^16
3*2 + 2*2 + 7*2 + 6*2 + 8*2
6+5+5+3+6
6+4+1+4+1+2+1+6
2^50
2^25
6+6+1+1+8+8+6+4
triangular_num <- sum(seq(1:2))
triangular_num
i <- 2
triangular_num <- sum(seq(1:i))
i
triangular_num
sqrt(4)
sqrt(5)
is.integer(sqrt(4))
is.integer(sqrt(5))
is.integer(sqrt(9))
(sqrt(9))
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
factors <- c()
for(i in 2:(sqrt(x)-1)) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(sqrt(x) == floor(sqrt(x))) 3 + 2*length(factors) else 2 + 2*length(factors)
}
factos(2)
num_fac(2)
num_fac(2)
num_fac(2)
num_fac <- function(x){
factors <- c()
for(i in 2:(sqrt(x)-1)) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(sqrt(x) == floor(sqrt(x))) 3 + 2*length(factors) else 2 + 2*length(factors)
output
}
num_fac(2)
num_fac(3)
num_fac(10)
num_fac(6)
num_fac(15)
num_fac(21)
num_fac(28)
num_fac(15)
num_fac <- function(x){
factors <- c()
for(i in 2:(sqrt(x)-1)) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(sqrt(x) == floor(sqrt(x))) 3 + 2*length(factors) else 2 + 2*length(factors)
factors
output
}
num_fac(15)
factors
factor(15)
num_fac <- function(x){
factors <- c()
for(i in 2:(sqrt(x)-1)) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(sqrt(x) == floor(sqrt(x))) 3 + 2*length(factors) else 2 + 2*length(factors)
factors
}
factor(15)
num_fac(15)
sqrt(15)
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
factors <- c()
for(i in 2:floor(sqrt(15))) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(sqrt(x) == floor(sqrt(x))) 1 + 2*length(factors) else 2 + 2*length(factors)
factors
}
num_fac(2)
num_fac(3)
num_fac(6)
num_fac(15)
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
factors <- c()
for(i in 2:floor(sqrt(15))) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(sqrt(x) == floor(sqrt(x))) 1 + 2*length(factors) else 2 + 2*length(factors)
output
}
num_fac(2)
num_fac(3)
num_fac(6)
num_fac(10)
num_fac(11)
num_fac(12)
num_fac(15)
num_fac(21)
num_fac(28)
num_fac(28)
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
factors <- c()
for(i in 2:floor(sqrt(x))) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(sqrt(x) == floor(sqrt(x))) 1 + 2*length(factors) else 2 + 2*length(factors)
output
}
num_fac
num_fac(2)
num_fac(3)
num_fac(66)
num_fac(6)
num_fac(4)
num_fac(5)
num_fac(7)
num_fac(8)
num_fac(9)
num_fac(10)
num_fac(15)
num_fac(21)
num_fac(28)
factors <- c()
for(i in 2:floor(sqrt(x))) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(x==1) 1 else if(x == 2 | x==3) 2 else if(sqrt(x) == floor(sqrt(x))) 1 + 2*length(factors) else 2 + 2*length(factors)
output
}
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
factors <- c()
for(i in 2:floor(sqrt(x))) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(x==1) 1 else if(x == 2 | x==3) 2 else if(sqrt(x) == floor(sqrt(x))) 1 + 2*length(factors) else 2 + 2*length(factors)
output
}
num_fac
num_fac(1)
num_fac(2)
num_fac(3)
num_fac(4)
num_fac(5)
num_fac(6)
num_fac(7)
num_fac(8)
num_fac(13195)
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
factors <- c()
for(i in 2:floor(sqrt(x))) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(x==1) 1 else if(x == 2 | x==3) 2 else if(sqrt(x) == floor(sqrt(x))) 1 + 2*length(factors) else 2 + 2*length(factors)
output
}
#Start with traingular number
i <- 2
triangular_num <- 1
while(num_factors <= 5) {
triangular_num <- triangular_num + i
num_factors <- num_fac(triangular_num)
i <- i + 1
}
num_factors
triangular_num
#Clear the environment
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
factors <- c()
for(i in 2:floor(sqrt(x))) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(x==1) 1 else if(x == 2 | x==3) 2 else if(sqrt(x) == floor(sqrt(x))) 1 + 2*length(factors) else 2 + 2*length(factors)
output
}
#Start with traingular number
i <- 2
triangular_num <- 1
num_factors <- 1
while(num_factors <= 5) {
triangular_num <- triangular_num + i
num_factors <- num_fac(triangular_num)
i <- i + 1
}
num_factors
triangular_num
#Clear the environment
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
factors <- c()
for(i in 2:floor(sqrt(x))) {
factors <- if (x %% i == 0) c(factors, i) else factors
}
output <- if(x==1) 1 else if(x == 2 | x==3) 2 else if(sqrt(x) == floor(sqrt(x))) 1 + 2*length(factors) else 2 + 2*length(factors)
output
}
#Start with traingular number
i <- 2
triangular_num <- 1
num_factors <- 1
while(num_factors <= 500) {
triangular_num <- triangular_num + i
num_factors <- num_fac(triangular_num)
i <- i + 1
}
num_factors
triangular_num
#Clear the environment
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
output <- 2
for(i in 2:floor(sqrt(x))) {
output <- if (x %% i == 0) output + 2 else output
}
output <- if(x==1) 1 else if(x == 2 | x==3) 2 else if(sqrt(x) == floor(sqrt(x))) output - 1 else output
output
}
#Start with traingular number
i <- 2
triangular_num <- 1
num_factors <- 1
while(num_factors <= 500) {
triangular_num <- triangular_num + i
num_factors <- num_fac(triangular_num)
i <- i + 1
}
num_factors
triangular_num
#Write a function to find number of factors
num_fac <- function(x){
#A number has atleast 2 factors: 1 and itself
output <- 2
#We only need to check the number of factors till sqrt of x as any number below that has a mirror number above that
for(i in 2:floor(sqrt(x))) {
#Add 2 the divisor and quotient to factor list
output <- if (x %% i == 0) output + 2 else output
}
#If x is 1
output <- if(x==1) 1 else if(sqrt(x) == floor(sqrt(x))) output - 1 else output
output
}
num_fac(2)
num_fac(3)
num_fac(3)
#Clear the environment
rm(list= ls())
#Write a function to find number of factors
num_fac <- function(x){
#A number has atleast 2 factors: 1 and itself
output <- 2
#We only need to check the number of factors till sqrt of x as any number below that has a mirror number above that
for(i in 2:floor(sqrt(x))) {
#Add 2 the divisor and quotient to factor list
output <- if (x %% i == 0) output + 2 else output
}
#If x is divisible by sqrt(x) then that should be counted only once; Hard code 1,2,3
output <- if(x==1) 1 else if(x == 2 | x==3) 2 else if(sqrt(x) == floor(sqrt(x))) output - 1 else output
output
}
start_time <- Sys.time()
#Start with traingular number
i <- 2
triangular_num <- 1
num_factors <- 1
while(num_factors <= 500) {
triangular_num <- triangular_num + i
num_factors <- num_fac(triangular_num)
i <- i + 1
}
num_factors
triangular_num
end_time <- Sys.time()
end_time - start_time
i
2^10000
x <- nchar(one) + nchar(two) + nchar(three) + nchar(four) + nchar(five)
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five")
x
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five") + nchar("six") + nchar("seven") + nchar("eight") + nchar("nine")
x
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five") + nchar("six") + nchar("seven") + nchar("eight") + nchar("nine")
y <- nchar("eleven") + nchar("twelve") + nchar("thirteen") + nchar("fourteen") + nchar("fifteen") + nchar("sixteen") + nchar("seventeen") + nchar("eighteen") + nchar("nineteen")
y
z <-z
p <- 9*x + y + 10(z)
p <- 9*x + y + 10*z
#Make one to nine sum
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five") + nchar("six") + nchar("seven") + nchar("eight") + nchar("nine")
y <- nchar("eleven") + nchar("twelve") + nchar("thirteen") + nchar("fourteen") + nchar("fifteen") + nchar("sixteen") + nchar("seventeen") + nchar("eighteen") + nchar("nineteen")
z <- nchar("twenty") + nchar("thirty") + nchar("fourty") + nchar("fifty") + nchar("sixty") + nchar("seventy") + nchar("eighty") + nchar("ninety")
p <- 9*x + y + 10*z
p
#one to nine
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five") + nchar("six") + nchar("seven") + nchar("eight") + nchar("nine")
#ten to nineteen
y <- nchar(ten) + nchar("eleven") + nchar("twelve") + nchar("thirteen") + nchar("fourteen") + nchar("fifteen") + nchar("sixteen") + nchar("seventeen") + nchar("eighteen") + nchar("nineteen")
#10s
z <- nchar("twenty") + nchar("thirty") + nchar("fourty") + nchar("fifty") + nchar("sixty") + nchar("seventy") + nchar("eighty") + nchar("ninety")
# one to 99
p <- 9*x + y + 10*z
#special chars
q <- nchar(hundred)
r <- nchar(and)
s <- (onethousand)
#Total
10*p + 900*q + 891*r + 100*x + s
#one to nine
x <- nchar("one") + nchar("two") + nchar("three") + nchar("four") + nchar("five") + nchar("six") + nchar("seven") + nchar("eight") + nchar("nine")
#ten to nineteen
y <- nchar("ten") + nchar("eleven") + nchar("twelve") + nchar("thirteen") + nchar("fourteen") + nchar("fifteen") + nchar("sixteen") + nchar("seventeen") + nchar("eighteen") + nchar("nineteen")
#10s
z <- nchar("twenty") + nchar("thirty") + nchar("fourty") + nchar("fifty") + nchar("sixty") + nchar("seventy") + nchar("eighty") + nchar("ninety")
# one to 99
p <- 9*x + y + 10*z
#special chars
q <- nchar("hundred")
r <- nchar("and")
s <- nchar("onethousand")
#Total
10*p + 900*q + 891*r + 100*x + s
10*p + 900*q + 9*99*r + 100*x + s
